// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model jobs {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  job_id              String?
  job_title           String
  job_employment_type String? @default("Full-time")
  job_apply_link      String  @default("/")
  job_description     String
  job_location        String
  job_is_remote       Boolean @default(false)
  employer_name       String
  employer_logo       String?
  job_salary          Int?
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  password    String
  role        String
  company     company?
  review      review[]
  application application[]
}

model company {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  owner_id     String     @unique @db.ObjectId
  company_name String
  company_logo String
  company_desc String
  owner        User       @relation(fields: [owner_id], references: [id])
  openings     openings[]
  review       review[]
}

model openings {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  location        String
  salary          Int
  employment_type String
  open            Boolean       @default(true)
  company         company?      @relation(fields: [companyId], references: [id])
  companyId       String?       @db.ObjectId
  application     application[]
}

model review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  company   company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId
}

model application {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  openings   openings? @relation(fields: [openingsId], references: [id])
  openingsId String?   @db.ObjectId
}
